# This workflow executes the E2E Test Suite for a series of combinations that
# represent different execution environments
name: continuous-delivery
on:
  # Can be triggered by:
  #
  # A push from any branch
  push:
    branches:
      - 'main'
      # TODO after review/testing, the branch 'dev/771' should be removed
      - 'dev/771'
  # A pull request (from this repository or a forked one) which is labelled
  pull_request_target:
    types: [labeled]
  # Manually or triggered by another workflow
  workflow_dispatch:
    inputs:
      depth:
        description: 'Depth (push, pull_request_target, main, schedule)'
        required: true
        default: 'main'
      test_level:
        description: 'Test level (0-4)'
        required: false
      build_plugin:
        type: boolean
        required: false
        default: false
        description: Include kubectl-cnpg plugin building
  # scheduled
  schedule:
    - cron:  '0 1 * * *'

# set up environment variables to be used across all the jobs
env:
  GOLANG_VERSION: "1.18.x"
  GOLANGCI_LINT_VERSION: "v1.49"
  KUBEBUILDER_VERSION: "2.3.1"
  KIND_VERSION: "v0.11.0"
  ROOK_VERSION: "v1.6.8"
  CNPG_IMAGE_NAME: "ghcr.io/${{ github.repository }}-testing"

defaults:
  run:
    # default failure handling for shell scripts in 'run' steps
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:
  # Detects if we should skip the workflow due to being duplicated. Exceptions:
  #   1. it's on 'main' branch
  #   2. it's triggered by events in the 'do_not_skip' list
  duplicate_runs:
    runs-on: ubuntu-20.04
    name: Skip duplicate runs
    continue-on-error: true
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip == 'true' && github.ref != 'refs/heads/main' }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["README.md", "docs/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  # Classify codebase changes along 5 different dimensions based on the files
  # changed in the commit/PR, and create 5 different filters which are used in
  # the following jobs to decide whether the step should be skipped.
  change-triage:
    name: Check changed files
    needs: duplicate_runs
    if: ${{ needs.duplicate_runs.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    outputs:
      docs-changed: ${{ steps.filter.outputs.docs-changed }}
      operator-changed: ${{ steps.filter.outputs.operator-changed }}
      test-changed: ${{ steps.filter.outputs.test-changed }}
      shell-script-changed: ${{ steps.filter.outputs.shell-script-changed }}
      go-code-changed: ${{ steps.filter.outputs.go-code-changed }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check for changes
      uses: dorny/paths-filter@v2.10.2
      id: filter
      # Remember to add new folders in the operator-changed filter if needed
      with:
        base: ${{ (github.event_name == 'schedule') && 'main' || '' }}
        filters: |
          docs-changed:
            - '**/*.md'
            - 'docs/**'
            - '.wordlist-en-custom.txt'
          operator-changed:
            - 'api/**'
            - 'cmd/**'
            - 'config/**'
            - 'controllers/**'
            - 'internal/**'
            - 'licenses/**'
            - 'pkg/**'
            - '.github/workflows/continuous-delivery.yml'
            - '.goreleaser.yml'
            - 'Dockerfile'
            - 'Makefile'
            - 'go.mod'
            - 'go.sum'
          test-changed:
            - 'tests/**'
            - 'hack/**'
          shell-script-changed:
            - '**/*.sh'
          go-code-changed:
            - '**/*.go'
            - '.golangci.yml'

  golangci:
    name: Run linters
    needs:
      - duplicate_runs
      - change-triage
    # Run Go linter only if Go code has changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      needs.change-triage.outputs.go-code-changed == 'true'
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout 4m

  shellcheck:
    name: Run shellcheck linter
    needs:
      - duplicate_runs
      - change-triage
    # Run shellcheck linter only if shell code has changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      needs.change-triage.outputs.shell-script-changed == 'true'
    runs-on: ubuntu-20.04
    env:
        SHELLCHECK_OPTS: -a -S style
    steps:
    -
      uses: actions/checkout@v3
    -
      name: Run ShellCheck
      uses: ludeeus/action-shellcheck@1.1.0

  tests:
    name: Run unit tests
    needs:
      - duplicate_runs
      - change-triage
    # Run unit tests only if the operator or the Go codebase have changed
    # AND
    # EITHER The slash command ('/test' or '/ready-to-test') is issued in the comment of the PR which is labeled with
    #        'ready to test :elephant:'
    # OR     it's on main branch
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      (
        needs.change-triage.outputs.operator-changed == 'true' ||
        needs.change-triage.outputs.go-code-changed == 'true'
      ) &&
      (
        github.event.client_payload.slash_command != null ||
        github.event_name == 'workflow_dispatch' ||
        (
           github.event_name == 'pull_request_target' &&
           github.event.action == 'labeled' &&
           contains(github.event.pull_request.labels.*.name, 'ready to test :elephant:')
        ) ||
        github.head_ref == 'main'
      )
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # The Unit test is performed per multiple supported k8s versions (each job for each k8s version) as below:
        k8s-version:
          - 1.25.x
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        # Cache Go modules on GitHub runners to be reused across jobs
        # See to: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Run unit tests
        env:
          ENVTEST_K8S_VERSION: ${{ matrix.k8s-version }}
        run: |
          make test
      -
        name: Coverage Summary
        if: matrix.k8s-version == '1.25.x'
        run: |
          go tool cover -func=cover.out -o coverage.out
      -
        name: Publish unit test summary
        if: matrix.k8s-version == '1.25.x'
        run: |
          echo "Unit test coverage: $(tail -n 1 coverage.out | awk '{print $3}')" >> $GITHUB_STEP_SUMMARY
  apidoc:
    name: Verify API doc is up to date
    needs:
      - duplicate_runs
      - change-triage
    # Run make apidoc if Go code or docs have changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      (
        needs.change-triage.outputs.go-code-changed == 'true' ||
        needs.change-triage.outputs.docs-changed == 'true'
      )
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Run make apidoc
      run: |
        make apidoc

    - name: Verify apidoc changes
      run: |
        apidoc_file_path='docs/src/api_reference.md'
        if git status --porcelain $apidoc_file_path | grep '^ M'; then
          echo "The API documentation doesn't reflect the current API. Please run make apidoc."
          exit 1
        fi

  crd:
    name: Verify CRD is up to date
    needs:
      - duplicate_runs
      - change-triage
    # Run make manifests if Go code have changed
    if: ${{ needs.duplicate_runs.outputs.should_skip != 'true' && needs.change-triage.outputs.go-code-changed == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Run make manifests
        run: |
          make manifests

      - name: Check CRD manifests are up to date
        run: |
          crd_path='config/crd'
          if git status --porcelain $crd_path | grep '^ M'; then
            echo "The CRD manifests do not reflect the current API. Please run make manifests."
            exit 1
          fi

  buildx:
    name: Build containers
    needs:
      - golangci
      - shellcheck
      - tests
      - apidoc
      - crd
      - duplicate_runs
      - change-triage
    # Build containers:
    #   if there have been any code changes OR it is a scheduled execution
    #   AND
    #   none of the preceding jobs failed
    if: |
      (
        github.event_name == 'schedule' ||
        needs.duplicate_runs.outputs.should_skip != 'true' &&
        (
          needs.change-triage.outputs.operator-changed == 'true' ||
          needs.change-triage.outputs.test-changed == 'true' ||
          needs.change-triage.outputs.shell-script-changed == 'true' ||
          needs.change-triage.outputs.go-code-changed == 'true'
        )
      ) &&
      always() &&
      (needs.golangci.result == 'success' || needs.golangci.result == 'skipped') &&
      (needs.shellcheck.result == 'success' || needs.shellcheck.result == 'skipped') &&
      (needs.tests.result == 'success' || needs.tests.result == 'skipped') &&
      (needs.apidoc.result == 'success' || needs.apidoc.result == 'skipped') &&
      (needs.crd.result == 'success' || needs.crd.result == 'skipped')
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
      # 'branch_name' is used in 'GetMostRecentReleaseTag' in the Go code
      branch_name: ${{ steps.build-meta.outputs.branch_name }}
      upload_artifact: ${{ steps.build-meta.outputs.upload_artifact }}
      commit_msg: ${{ steps.build-meta.outputs.commit_msg }}
      commit_sha: ${{ steps.build-meta.outputs.commit_sha }}
      author_name: ${{ steps.build-meta.outputs.author_name }}
      author_email: ${{ steps.build-meta.outputs.author_email }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          # To identify the commit we need the history and all the tags.
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Build meta
        id: build-meta
        run: |
          images='${{ env.CNPG_IMAGE_NAME }}'
          tags=''
          labels=''
          commit_sha=${{ github.event.pull_request.head.sha || github.sha }}
          commit_date=$(git log -1 --pretty=format:'%ad' --date short "${commit_sha}" || : )
          # use git describe to get the nearest tag and use that to build the version (e.g. 1.4.0+dev24 or 1.4.0)
          commit_version=$(git describe --tags --match 'v*' "${commit_sha}"| sed -e 's/^v//; s/-g[0-9a-f]\+$//; s/-\([0-9]\+\)$/+dev\1/')

          # shortened commit sha
          commit_short=$(git rev-parse --short "${commit_sha}")
          commit_message=$(git show -s --format=%B "${commit_sha}")

          # get git user and email
          author_name=$(git show -s --format='%an' "${commit_sha}")
          author_email=$(git show -s --format='%ae' "${commit_sha}")

          # extract branch name
          if [ ${{ github.event_name }} != 'pull_request' ] && [ ${{ github.event_name }} != 'pull_request_target' ]
          then
            branch_name=${GITHUB_REF#refs/heads/}
          else
            branch_name=${GITHUB_HEAD_REF}
          fi

          upload_artifacts=false
          # TODO after review/testing, the `|| ${branch_name} == 'dev/771'` should be removed
          if [[ ${branch_name} == 'main' || ${branch_name} =~ 'release/' || ${branch_name} == 'dev/771' ]]; then
            upload_artifacts=true
          fi

          echo "::set-output name=images::${images}"
          echo "::set-output name=tags::${tags}"
          echo "::set-output name=labels::${labels}"
          echo "::set-output name=date::${commit_date}"
          echo "::set-output name=version::${commit_version}"
          echo "::set-output name=commit::${commit_short}"
          echo "::set-output name=commit_sha::${commit_sha}"
          echo "::set-output name=commit_msg::${commit_message}"
          echo "::set-output name=author_name::${author_name}"
          echo "::set-output name=author_email::${author_email}"
          echo "::set-output name=branch_name::${branch_name}"
          echo "::set-output name=upload_artifacts::${upload_artifacts}"
      -
        name: Set GoReleaser environment
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo PWD=$(pwd) >> $GITHUB_ENV
      -
        name: Run GoReleaser to build kubectl-cnpg plugin
        uses: goreleaser/goreleaser-action@v3
        if: |
          github.event_name == 'schedule' || github.event.inputs.build_plugin == 'true'
        with:
          distribution: goreleaser
          version: latest
          args: build --skip-validate --rm-dist --id kubectl-cnpg
        env:
          DATE: ${{ steps.build-meta.outputs.date }}
          COMMIT: ${{ steps.build-meta.outputs.commit }}
          VERSION: ${{ steps.build-meta.outputs.version }}
      # Send Slack notification once build including plugin kubectl-cnpg fails, we only report the scheduled run to avoid message overflow
      -
        name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: |
          failure() && github.event_name == 'schedule'
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/85171364?size=48
          SLACK_USERNAME: cnpg-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Building plugin `kubectl-cnpg` failed!
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: build --skip-validate --rm-dist --id manager
        env:
          DATE: ${{ steps.build-meta.outputs.date }}
          COMMIT: ${{ steps.build-meta.outputs.commit }}
          VERSION: ${{ steps.build-meta.outputs.version }}
      -
        name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.build-meta.outputs.images }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
      -
        name: Detect platforms
        id: docker-platforms
        run: |
          # Keep in mind that adding more platforms (architectures) will increase the building
          # time even if we use the ghcache for the building process.
          platforms="linux/amd64,linux/arm64,linux/arm/v7"
          echo "::set-output name=platforms::${platforms}"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3.1.1
        with:
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.build-meta.outputs.version }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.build-meta.outputs.labels }}
          secrets: GIT_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
      -
        name: Image Meta
        id: image-meta
        env:
          TAGS: ${{ steps.docker-meta.outputs.tags }}
        run: |
          # If there is more than one tag, take the first one
          # TAGS could be separated by newlines or commas
          image=$(sed -n '1{s/,.*//; p}' <<< "$TAGS")
          echo "::set-output name=image::${image}"
      -
        name: Generate manifest for operator deployment
        id: generate-manifest
        run: |
          make generate-manifest
      -
        name: Upload the operator manifest as artifact in workflow
        uses: actions/upload-artifact@v3
        with:
          name: operator-manifest.yaml
          path: dist/operator-manifest.yaml
          retention-days: 7

  check-condition:
    name: check condition
    needs:
      - buildx
      - duplicate_runs
    if: always()
    runs-on: ubuntu-20.04
    steps:
      -
        name: check condition
        run: |
          echo ${{ needs.duplicate_runs.outputs.should_skip }}
          echo ${{ needs.buildx.result }}
          echo ${{ needs.buildx.outputs.upload_artifacts }}
          echo ${{ github.repository }}

  publish-artifacts:
    name: Publish artifacts
    needs:
      - buildx
      - duplicate_runs
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      always() &&
      needs.buildx.result == 'success' &&
      needs.buildx.outputs.upload_artifacts == 'true' &&
      github.repository == 'cloudnative-pg/cloudnative-pg'
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout artifact
        uses: actions/checkout@v3
        with:
          repository: cloudnative-pg/artifacts
          token: ${{ secrets.REPO_GHA_PAT }}
          fetch-depth: 0
      -
        name: Switch to or create the right branch
        run: |
          git switch -C ${{ steps.build-meta.outputs.branch_name }}
      -
        name: Prepare the operator manifest
        uses: actions/download-artifact@v3
        with:
          name: operator-manifest.yaml
          path: manifests/operator-manifest.yaml
      -
        name: Upload the operator manifest
        uses: EndBug/add-and-commit@v7
        with:
          fetch: false
          new_branch: ${{ steps.build-meta.outputs.branch_name }}
          author_name: ${{ needs.buildx.outputs.author_name }}
          author_email: ${{ needs.buildx.outputs.author_email }}
          message: |
            ${{ needs.buildx.outputs.commit_msg }}

            https://github.com/cloudnative-pg/cloudnative-pg/commit/${{ needs.buildx.outputs.commit_sha }}